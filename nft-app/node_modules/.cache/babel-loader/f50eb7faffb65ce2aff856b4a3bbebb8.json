{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers } from '@usedapp/core';\nimport axios from 'axios';\nimport { useState } from 'react';\nexport const useVerification = () => {\n  _s();\n\n  const {\n    account\n  } = useEthers();\n  const [loading, setLoading] = useState(false);\n  const [haveAccess, setHaveAccess] = useState(false);\n\n  const handleVerify = async nftAddress => {\n    var _data$ownedNfts;\n\n    setLoading(true);\n    const response = await axios.get(`https://eth-mainnet.alchemyapi.io/v2/ZZAGo43pnhwiFaE6TrbvPSSIOxJPRY5b/getNFTs?owner=${account}`);\n    const {\n      data\n    } = response;\n    const ntf = data === null || data === void 0 ? void 0 : (_data$ownedNfts = data.ownedNfts) === null || _data$ownedNfts === void 0 ? void 0 : _data$ownedNfts.find(on => {\n      var _on$contract;\n\n      return (on === null || on === void 0 ? void 0 : (_on$contract = on.contract) === null || _on$contract === void 0 ? void 0 : _on$contract.address) === nftAddress;\n    });\n    setLoading(false);\n\n    if (!ntf) {\n      alert('No permission to see the page :c');\n      setHaveAccess(false);\n      return;\n    }\n\n    setHaveAccess(true);\n  };\n\n  return {\n    loading,\n    haveAccess,\n    handleVerify\n  };\n};\n\n_s(useVerification, \"q9DgQQ9nYcxto2tE3zINZIMQZlA=\", false, function () {\n  return [useEthers];\n});","map":{"version":3,"sources":["/Users/andrerebonato/Projects/personal/reactjs-web3/nft-app/src/hooks/useVerification.ts"],"names":["useEthers","axios","useState","useVerification","account","loading","setLoading","haveAccess","setHaveAccess","handleVerify","nftAddress","response","get","data","ntf","ownedNfts","find","on","contract","address","alert"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,eAA1B;AACA,OAAOC,KAAP,MAAqC,OAArC;AACA,SAASC,QAAT,QAAyB,OAAzB;AAGA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,SAAS,EAA7B;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMO,YAAY,GAAG,MAAOC,UAAP,IAA8B;AAAA;;AAC/CJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMK,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAIrB,uFAAsFR,OAAQ,EAJzE,CAAvB;AAMA,UAAM;AAAES,MAAAA;AAAF,QAAWF,QAAjB;AAEA,UAAMG,GAAG,GAAGD,IAAH,aAAGA,IAAH,0CAAGA,IAAI,CAAEE,SAAT,oDAAG,gBAAiBC,IAAjB,CAAuBC,EAAD;AAAA;;AAAA,aAAa,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,4BAAAA,EAAE,CAAEC,QAAJ,8DAAcC,OAAd,MAA0BT,UAAvC;AAAA,KAAtB,CAAZ;AAEAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;;AAEA,QAAI,CAACQ,GAAL,EAAU;AACNM,MAAAA,KAAK,CAAC,kCAAD,CAAL;AACAZ,MAAAA,aAAa,CAAC,KAAD,CAAb;AACA;AACH;;AACDA,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GApBD;;AAsBA,SAAO;AACHH,IAAAA,OADG;AAEHE,IAAAA,UAFG;AAGHE,IAAAA;AAHG,GAAP;AAKH,CAhCM;;GAAMN,e;UACWH,S","sourcesContent":["import { useEthers } from '@usedapp/core';\nimport axios, { AxiosResponse } from 'axios';\nimport { useState } from 'react';\nimport { Nft } from '../types/nft.types';\n\nexport const useVerification = () => {\n    const { account } = useEthers();\n    const [loading, setLoading] = useState(false);\n    const [haveAccess, setHaveAccess] = useState(false);\n    \n    const handleVerify = async (nftAddress: string) => {\n        setLoading(true);\n        const response = await axios.get<\n            AxiosResponse,\n            { data: { ownedNfts: Nft[] }}\n        >\n        (`https://eth-mainnet.alchemyapi.io/v2/ZZAGo43pnhwiFaE6TrbvPSSIOxJPRY5b/getNFTs?owner=${account}`);\n        \n        const { data } = response;\n\n        const ntf = data?.ownedNfts?.find((on: any) => on?.contract?.address === nftAddress);\n\n        setLoading(false);\n\n        if (!ntf) {\n            alert('No permission to see the page :c');\n            setHaveAccess(false);\n            return;\n        }\n        setHaveAccess(true);\n    }\n\n    return {\n        loading,\n        haveAccess,\n        handleVerify,\n    }\n}"]},"metadata":{},"sourceType":"module"}