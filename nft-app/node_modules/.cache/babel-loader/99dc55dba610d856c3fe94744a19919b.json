{"ast":null,"code":"var _jsxFileName = \"/Users/andrerebonato/Projects/personal/reactjs-web3/nft-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ChakraProvider, Text, useDisclosure, Input } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport Layout from \"./components/Layout\";\nimport ConnectButton from \"./components/ConnectButton\";\nimport AccountModal from \"./components/AccountModal\";\nimport \"@fontsource/inter\";\nimport { useEthers } from \"@usedapp/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const [nftAddress, setNftAddress] = useState('');\n  const {\n    account,\n    activateBrowserWallet\n  } = useEthers();\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        color: 'white',\n        mb: 5,\n        children: account ? '' : 'Select your wallet to authenticate by pressing the button bellow.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ConnectButton, {\n        handleOpenModal: onOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), account && /*#__PURE__*/_jsxDEV(Input, {\n        value: nftAddress,\n        onChange: e => setNftAddress(e.currentTarget.value),\n        mt: 4,\n        placeholder: \"Enter your NFT address to verify if you have permission to continue\",\n        mr: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AccountModal, {\n        isOpen: isOpen,\n        onClose: onClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"X+ZkKTbkSTpojTeUe+UL4s8dPps=\", false, function () {\n  return [useDisclosure, useEthers];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/andrerebonato/Projects/personal/reactjs-web3/nft-app/src/App.tsx"],"names":["useState","ChakraProvider","Text","useDisclosure","Input","theme","Layout","ConnectButton","AccountModal","useEthers","App","isOpen","onOpen","onClose","nftAddress","setNftAddress","account","activateBrowserWallet","e","currentTarget","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,aAA/B,EAA8CC,KAA9C,QAA2D,kBAA3D;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAO,mBAAP;AACA,SAASC,SAAT,QAA0B,eAA1B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA8BV,aAAa,EAAjD;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAEgB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqCR,SAAS,EAApD;AAEA,sBACE,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAEJ,KAAvB;AAAA,2BACE,QAAC,MAAD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAE,OAAb;AAAsB,QAAA,EAAE,EAAE,CAA1B;AAAA,kBACGW,OAAO,GAAG,EAAH,GAAQ;AADlB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,aAAD;AAAe,QAAA,eAAe,EAAEJ;AAAhC;AAAA;AAAA;AAAA;AAAA,cAJF,EAKGI,OAAO,iBACN,QAAC,KAAD;AACE,QAAA,KAAK,EAAEF,UADT;AAEE,QAAA,QAAQ,EAAEI,CAAC,IAAIH,aAAa,CAACG,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAF9B;AAGE,QAAA,EAAE,EAAE,CAHN;AAIE,QAAA,WAAW,EAAC,qEAJd;AAKE,QAAA,EAAE,EAAE;AALN;AAAA;AAAA;AAAA;AAAA,cANJ,eAcE,QAAC,YAAD;AAAc,QAAA,MAAM,EAAET,MAAtB;AAA8B,QAAA,OAAO,EAAEE;AAAvC;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GAzBQH,G;UAC6BP,a,EAEOM,S;;;KAHpCC,G;AA2BT,eAAeA,GAAf","sourcesContent":["import { useState } from 'react';\nimport { ChakraProvider, Text, useDisclosure, Input } from \"@chakra-ui/react\";\nimport theme from \"./theme\";\nimport Layout from \"./components/Layout\";\nimport ConnectButton from \"./components/ConnectButton\";\nimport AccountModal from \"./components/AccountModal\";\nimport \"@fontsource/inter\";\nimport { useEthers } from \"@usedapp/core\";\n\nfunction App() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [nftAddress, setNftAddress] = useState('');\n  const { account, activateBrowserWallet } = useEthers();\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Layout>\n        <Text color={'white'} mb={5}>\n          {account ? '' : 'Select your wallet to authenticate by pressing the button bellow.'}\n        </Text>\n        <ConnectButton handleOpenModal={onOpen} />\n        {account && \n          <Input \n            value={nftAddress} \n            onChange={e => setNftAddress(e.currentTarget.value)}\n            mt={4} \n            placeholder=\"Enter your NFT address to verify if you have permission to continue\"\n            mr={4}\n          />\n        }\n        <AccountModal isOpen={isOpen} onClose={onClose} />\n      </Layout>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}