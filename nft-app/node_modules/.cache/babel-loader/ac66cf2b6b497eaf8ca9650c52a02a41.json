{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers } from '@usedapp/core';\nimport axios from 'axios';\nimport { useState } from 'react';\nexport const useVerification = () => {\n  _s();\n\n  const {\n    account\n  } = useEthers();\n  const [loading, setLoading] = useState(false);\n\n  const handleVerify = async nftAddress => {\n    var _data$ownedNfts;\n\n    setLoading(true);\n    const response = await axios.get(`https://eth-mainnet.alchemyapi.io/v2/ZZAGo43pnhwiFaE6TrbvPSSIOxJPRY5b/getNFTs?owner=0x9ea493786d8be968a9652976543999456d0bb5fc`);\n    const {\n      data\n    } = response;\n    const ntf = data === null || data === void 0 ? void 0 : (_data$ownedNfts = data.ownedNfts) === null || _data$ownedNfts === void 0 ? void 0 : _data$ownedNfts.find(on => {\n      var _on$contract;\n\n      return (on === null || on === void 0 ? void 0 : (_on$contract = on.contract) === null || _on$contract === void 0 ? void 0 : _on$contract.address) === nftAddress;\n    });\n    console.log('ntf', ntf);\n    setLoading(false);\n  };\n\n  return {\n    loading,\n    handleVerify\n  };\n};\n\n_s(useVerification, \"iC8khqIh4/B6USL8Q8kWN1TMJSc=\", false, function () {\n  return [useEthers];\n});","map":{"version":3,"sources":["/Users/andrerebonato/Projects/personal/reactjs-web3/nft-app/src/hooks/useVerification.ts"],"names":["useEthers","axios","useState","useVerification","account","loading","setLoading","handleVerify","nftAddress","response","get","data","ntf","ownedNfts","find","on","contract","address","console","log"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,eAA1B;AACA,OAAOC,KAAP,MAAqC,OAArC;AACA,SAASC,QAAT,QAAyB,OAAzB;AAGA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,SAAS,EAA7B;AACA,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMK,YAAY,GAAG,MAAOC,UAAP,IAA8B;AAAA;;AAC/CF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMG,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAN,CAIrB,gIAJqB,CAAvB;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAWF,QAAjB;AAEA,UAAMG,GAAG,GAAGD,IAAH,aAAGA,IAAH,0CAAGA,IAAI,CAAEE,SAAT,oDAAG,gBAAiBC,IAAjB,CAAuBC,EAAD;AAAA;;AAAA,aAAa,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,4BAAAA,EAAE,CAAEC,QAAJ,8DAAcC,OAAd,MAA0BT,UAAvC;AAAA,KAAtB,CAAZ;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBP,GAAnB;AAEAN,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAfD;;AAiBA,SAAO;AACHD,IAAAA,OADG;AAEHE,IAAAA;AAFG,GAAP;AAIH,CAzBM;;GAAMJ,e;UACWH,S","sourcesContent":["import { useEthers } from '@usedapp/core';\nimport axios, { AxiosResponse } from 'axios';\nimport { useState } from 'react';\nimport { Nft } from '../types/nft.types';\n\nexport const useVerification = () => {\n    const { account } = useEthers();\n    const [loading, setLoading] = useState(false);\n    \n    const handleVerify = async (nftAddress: string) => {\n        setLoading(true);\n        const response = await axios.get<\n            AxiosResponse,\n            { data: { ownedNfts: Nft[] }}\n        >\n        (`https://eth-mainnet.alchemyapi.io/v2/ZZAGo43pnhwiFaE6TrbvPSSIOxJPRY5b/getNFTs?owner=0x9ea493786d8be968a9652976543999456d0bb5fc`);\n        \n        const { data } = response;\n\n        const ntf = data?.ownedNfts?.find((on: any) => on?.contract?.address === nftAddress);\n\n        console.log('ntf', ntf);\n\n        setLoading(false);\n    }\n\n    return {\n        loading,\n        handleVerify,\n    }\n}"]},"metadata":{},"sourceType":"module"}